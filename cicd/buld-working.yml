trigger:
- main

resources:
- repo: self

variables:
  dockerRegistryServiceConnection: 'ACRtftecbrazilsouth27702'
  imageRepository: 'tftec'  # Nome do repositório da imagem Docker
  containerRegistry: 'acrtftecbrazilsouth27702.azurecr.io'  # Container Registry ACR
  dockerfilePath: 'docker/Dockerfile'  # Caminho do Dockerfile
  tag: '$(Build.BuildId)'  # Tag dinâmica baseada no Build ID
  vmImageName: 'ubuntu-latest'  # Imagem do agente de build

stages:
- stage: BuildDockerAndHelm
  displayName: Build Docker Image and Helm Chart
  jobs:
  - job: Build
    displayName: Build Docker Image and Helm Chart
    pool:
      vmImage: $(vmImageName)
    steps:
    # Build and push Docker image
    - task: Docker@2
      displayName: Build and push Docker image
      inputs:
        command: buildAndPush
        repository: $(imageRepository)
        dockerfile: $(dockerfilePath)
        containerRegistry: $(dockerRegistryServiceConnection)
        tags: |
          $(tag)
        buildContext: '$(Build.SourcesDirectory)'  # Contexto de build do Docker

    # Instalação do Helm no agente
    - task: HelmInstaller@1
      displayName: Install Helm on agent
      inputs:
        helmVersionToInstall: 'latest'

    # Empacota o Helm Chart
    - script: |
        helm lint chart
        helm package chart
      displayName: Lint and Package Helm chart
      workingDirectory: $(Build.SourcesDirectory)

    # Publica o Helm chart como artefato de build
    - publish: $(Build.SourcesDirectory)/chart
      artifact: helm-package
      displayName: Publish Helm package
